{
  "address": "0x5D99e1854f1C1c53e4E5f20f51A0225587434305",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract GateKeeper",
          "name": "gateKeeper",
          "type": "address"
        },
        {
          "internalType": "contract SupplyChainRegistry",
          "name": "registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "statemachine",
          "type": "address"
        }
      ],
      "name": "StateMachineCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CREATE_STATEMACHINE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPDATE_UIFIELDDEFINITIONS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "Order_Number",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsFieldContainerHash",
          "type": "string"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateKeeper",
      "outputs": [
        {
          "internalType": "contract GateKeeper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUIFieldDefinitionsHash",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uiFieldDefinitionsHash",
          "type": "string"
        }
      ],
      "name": "setUIFieldDefinitionsHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdd70d21433d9cbbdbdf17935e239e430fb86fee55e7ef50cbd96247419d1c46b",
  "receipt": {
    "to": null,
    "from": "0x30aeb7D1C26C28dbc057e3F86399a9E3CB40CdEe",
    "contractAddress": "0x5D99e1854f1C1c53e4E5f20f51A0225587434305",
    "transactionIndex": 0,
    "gasUsed": "2760730",
    "logsBloom": "0x
    "blockHash": "0x5cc1716cf6ef93797cf8c66486e4f4be89059dbf8bcdb0aff8038e321372ae0c",
    "transactionHash": "0xdd70d21433d9cbbdbdf17935e239e430fb86fee55e7ef50cbd96247419d1c46b",
    "logs": [],
    "blockNumber": 194246,
    "cumulativeGasUsed": "2760730",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x49a2b6A16714569Cbbc4b4D08b52b9271455d8A5",
    "0xEBffD3345dF75cd720306a3d49313F9372e845E8"
  ],
  "numDeployments": 1,
  "solcInputHash": "74d01ba1355a9027c08cc2506d370f73",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract GateKeeper\",\"name\":\"gateKeeper\",\"type\":\"address\"},{\"internalType\":\"contract SupplyChainRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"statemachine\",\"type\":\"address\"}],\"name\":\"StateMachineCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATE_STATEMACHINE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_UIFIELDDEFINITIONS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Order_Number\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsFieldContainerHash\",\"type\":\"string\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateKeeper\",\"outputs\":[{\"internalType\":\"contract GateKeeper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUIFieldDefinitionsHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uiFieldDefinitionsHash\",\"type\":\"string\"}],\"name\":\"setUIFieldDefinitionsHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"create(string,string)\":{\"details\":\"Factory method to create a new supplychain. Emits StateMachineCreated event.\",\"params\":{\"Order_Number\":\"Unique Identification Number\",\"ipfsFieldContainerHash\":\"ipfs hash of supplychain metadata\"}},\"setUIFieldDefinitionsHash(string)\":{\"params\":{\"uiFieldDefinitionsHash\":\"value to assign to _uiFieldDefinitionsHash\"}}},\"title\":\"Factory contract for supplychain state machines\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"create(string,string)\":{\"notice\":\"Create new supplychain\"},\"getUIFieldDefinitionsHash()\":{\"notice\":\"Retrieves the value of `_uiFieldDefinitionsHash`\"},\"setUIFieldDefinitionsHash(string)\":{\"notice\":\"Sets the value of `_uiFieldDefinitionsHash`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/supplychain/SupplyChainFactory.sol\":\"SupplyChainFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/_library/authentication/GateKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SettleMint.com\\n/**\\n * Copyright (C) SettleMint NV - All Rights Reserved\\n *\\n * Use of this file is strictly prohibited without an active license agreement.\\n * Distribution of this file, via any medium, is strictly prohibited.\\n *\\n * For license inquiries, contact hello@settlemint.com\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IRoleRegistry.sol\\\";\\n\\n/**\\n * @title Manages contract permissions\\n */\\ncontract GateKeeper {\\n  bytes32 public constant CREATE_PERMISSIONS_ROLE = bytes32(\\\"CREATE_PERMISSIONS_ROLE\\\");\\n  bytes32 public constant ADD_ROLEREGISTRY_ROLE = bytes32(\\\"ADD_ROLEREGISTRY_ROLE\\\");\\n  bytes32 public constant ADD_KNOWNROLE_ROLE = bytes32(\\\"ADD_KNOWNROLE_ROLE\\\");\\n\\n  event SetPermission(address indexed entity, address indexed contractAddress, bytes32 indexed role, bool allowed);\\n  event ChangePermissionManager(address indexed contractAddress, bytes32 indexed role, address indexed manager);\\n\\n  // whether a certain entity has a permission\\n  mapping(address => mapping(address => mapping(bytes32 => bool))) permissions;\\n  // who is the manager of a permission\\n  mapping(address => mapping(bytes32 => address)) permissionManager;\\n  // a mapping of roles to the address of their correspending role registry\\n  mapping(bytes32 => address) roleToRoleRegistry;\\n\\n  // a list of all RoleRegistries\\n  IRoleRegistry[] roleRegistries;\\n\\n  bytes32[] public knownRoles;\\n  mapping(bytes32 => bool) private knownRole;\\n\\n  modifier onlyPermissionManager(address _contract, bytes32 role) {\\n    require(msg.sender == getPermissionManager(_contract, role), \\\"Sender is not the permission manager\\\");\\n    _;\\n  }\\n\\n  modifier auth(bytes32 _role) {\\n    require(hasPermission(msg.sender, address(this), _role), \\\"Sender does not have the correct permissions\\\");\\n    _;\\n  }\\n\\n  modifier authMany(bytes32[] memory _roles) {\\n    bool hasRole = false;\\n    for (uint256 i = 0; i < _roles.length; i++) {\\n      if (hasPermission(msg.sender, address(this), _roles[i])) {\\n        hasRole = true;\\n        break;\\n      }\\n    }\\n    require(hasRole == true, \\\"Sender does not have the correct permissions\\\");\\n    _;\\n  }\\n\\n  modifier authWithCustomReason(bytes32 _role, string memory reason) {\\n    require(hasPermission(msg.sender, address(this), _role), reason);\\n    _;\\n  }\\n\\n  modifier authManyWithCustomReason(bytes32[] memory _roles, string memory reason) {\\n    bool hasRole = false;\\n    for (uint256 i = 0; i < _roles.length; i++) {\\n      if (hasPermission(msg.sender, address(this), _roles[i])) {\\n        hasRole = true;\\n        break;\\n      }\\n    }\\n    require(hasRole == true, reason);\\n    _;\\n  }\\n\\n  constructor() {\\n    _createPermission(msg.sender, address(this), CREATE_PERMISSIONS_ROLE, msg.sender);\\n    _createPermission(msg.sender, address(this), ADD_ROLEREGISTRY_ROLE, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Adds an existing role registry to an internal collection.\\n   * @dev Adds an existing role registry to an internal collection. Access is limited by the ACL.\\n   * @param roleRegistry Address of the role registry to be included\\n   */\\n  function addRoleRegistry(address roleRegistry) external auth(ADD_ROLEREGISTRY_ROLE) {\\n    roleRegistries.push(IRoleRegistry(roleRegistry));\\n  }\\n\\n  /**\\n   * @notice Creates a permission that wasn't previously set.\\n   * @dev Create a new permission granting `_entity` the ability to perform actions of role `_role` on `_contract` (setting `_manager` as parent).\\n   * If a created permission is removed it is possible to reset it with createPermission. Access is limited by the ACL.\\n   * @param _entity Address of the whitelisted entity that will be able to perform the role, this can be a user or a role registry\\n   * @param _contract Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n   * @param _role Identifier for the group of actions allowed to perform\\n   * @param _manager Entity address that will be able to grant and revoke the permission further.\\n   */\\n  function createPermission(\\n    address _entity,\\n    address _contract,\\n    bytes32 _role,\\n    address _manager\\n  ) public auth(CREATE_PERMISSIONS_ROLE) {\\n    if (!knownRole[_role]) {\\n      knownRoles.push(_role);\\n      knownRole[_role] = true;\\n    }\\n\\n    _createPermission(_entity, _contract, _role, _manager);\\n  }\\n\\n  /**\\n   * @notice Grants a permission if allowed.\\n   * @dev Grants `_entity` the ability to perform actions of role `_role` on `_contract`.\\n   * This requires `msg.sender` to be the permission manager.\\n   * @param _entity Address of the whitelisted entity that will be able to perform the role\\n   * @param _contract Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n   * @param _role Identifier for the group of actions allowed to perform\\n   */\\n  function grantPermission(\\n    address _entity,\\n    address _contract,\\n    bytes32 _role\\n  ) public onlyPermissionManager(_contract, _role) {\\n    _setPermission(_entity, _contract, _role, true);\\n  }\\n\\n  /**\\n   * @notice Revokes permission if allowed.\\n   * @dev Revokes `_entity` the ability to perform actions of role `_role` on `_contract`.\\n   * This requires `msg.sender` to be the parent of the permission\\n   * @param _entity Address of the whitelisted entity that will be revoked access\\n   * @param _contract Address of the app in which the role is revoked\\n   * @param _role Identifier for the group of actions allowed to perform\\n   */\\n  function revokePermission(\\n    address _entity,\\n    address _contract,\\n    bytes32 _role\\n  ) public onlyPermissionManager(_contract, _role) {\\n    _setPermission(_entity, _contract, _role, false);\\n  }\\n\\n  /**\\n   * @notice Sets the manager address of a permission on a contract\\n   * @dev Sets `_newManager` as the manager of the permission `_role` on `_contract`\\n   * This requires `msg.sender` to be the parent of the permission\\n   * @param _newManager Address for the new manager\\n   * @param _contract Address of the app in which the permission management is being transferred\\n   * @param _role Identifier for the group of actions allowed to perform\\n   */\\n  function setPermissionManager(\\n    address _newManager,\\n    address _contract,\\n    bytes32 _role\\n  ) public onlyPermissionManager(_contract, _role) {\\n    _setPermissionManager(_newManager, _contract, _role);\\n  }\\n\\n  /**\\n   * @notice Get manager address for a permission on a contract\\n   * @dev Get manager address for the permission `_role` on `_contract`\\n   * @param _contract Contract address\\n   * @param _role Role identifier\\n   * @return Address of the manager for the permission\\n   */\\n  function getPermissionManager(address _contract, bytes32 _role) public view returns (address) {\\n    return permissionManager[_contract][_role];\\n  }\\n\\n  /**\\n   * @notice Lists all the permissions of an entity on a contract address\\n   * @dev Lists all permissions for `_entity` on `_contract`\\n   * @param _entity Entity address\\n   * @param _contract Contract address\\n   * @return bytes32[] List of permissions\\n   */\\n  function permissionsOf(address _entity, address _contract) public view returns (bytes32[] memory) {\\n    uint8 counter = 0;\\n    bytes32[] memory tmp = new bytes32[](knownRoles.length);\\n    for (uint256 i = 0; i < knownRoles.length; i++) {\\n      if (hasPermission(_entity, _contract, knownRoles[i])) {\\n        tmp[counter] = knownRoles[i];\\n        counter += 1;\\n      }\\n    }\\n\\n    bytes32[] memory permissionsList = new bytes32[](counter);\\n    for (uint256 j = 0; j < counter; j++) {\\n      permissionsList[j] = tmp[j];\\n    }\\n\\n    return permissionsList;\\n  }\\n\\n  /**\\n   * @notice Checks ACL on kernel or permission status\\n   * @dev Checks if `_entity` has permission `_role` on `_contract`\\n   * @param _entity Entity address\\n   * @param _contract Contract address\\n   * @param _role Role identifier\\n   * @return Boolean indicating whether the ACL allows the role or not\\n   */\\n  function hasPermission(\\n    address _entity,\\n    address _contract,\\n    bytes32 _role\\n  ) public view returns (bool) {\\n    // the address passed in has the permissions themselves\\n    bool personalPermission = permissions[_entity][_contract][_role];\\n    if (personalPermission) {\\n      return personalPermission;\\n    }\\n    // or we will check if any of the role registries have the permission\\n    for (uint256 counter = 0; counter < roleRegistries.length; counter++) {\\n      address registry = address(roleRegistries[counter]);\\n      bool registryPermission = permissions[registry][_contract][_role];\\n      if (registryPermission) {\\n        if (roleRegistries[counter].hasRole(_entity)) {\\n          return true;\\n        }\\n      }\\n    }\\n    // if, not, deny!\\n    return false;\\n  }\\n\\n  /**\\n   * @notice Retrieves the role registry address for a given role\\n   * @dev Retrieves the role registry for the role `_role`\\n   * @param _role Identifier for the role mapped to a role registry\\n   * @return address of the role registry that corresponds to the role\\n   */\\n  function getRoleRegistryAddress(bytes32 _role) public view returns (address) {\\n    return roleToRoleRegistry[_role];\\n  }\\n\\n  /**\\n   * @notice Sets the role registry address for a given role\\n   * @dev Sets the role registry for the role `_role` to `_address`. Access is limited by the ACL.\\n   * @param _role Identifier for the role mapped to a role registry\\n   * @param _address address of the role registry to put into the store\\n   */\\n  function setRoleRegistryAddress(bytes32 _role, address _address)\\n    public\\n    authWithCustomReason(ADD_ROLEREGISTRY_ROLE, \\\"Sender needs ADD_ROLEREGISTRY_ROLE\\\")\\n  {\\n    roleToRoleRegistry[_role] = _address;\\n\\n    if (!knownRole[_role]) {\\n      knownRoles.push(_role);\\n      knownRole[_role] = true;\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal createPermission for access inside the gatekeeper (on instantiation)\\n   */\\n  function _createPermission(\\n    address _entity,\\n    address _contract,\\n    bytes32 _role,\\n    address _manager\\n  ) internal {\\n    require(\\n      permissionManager[_contract][_role] == address(0x0),\\n      \\\"only allow permission creation when it has no manager (has not been created before)\\\"\\n    );\\n    _setPermission(_entity, _contract, _role, true);\\n    _setPermissionManager(_manager, _contract, _role);\\n  }\\n\\n  /**\\n   * @dev Internal function called to actually save the permission\\n   */\\n  function _setPermission(\\n    address _entity,\\n    address _contract,\\n    bytes32 _role,\\n    bool _allowed\\n  ) internal {\\n    permissions[_entity][_contract][_role] = _allowed;\\n    emit SetPermission(_entity, _contract, _role, _allowed);\\n  }\\n\\n  /**\\n   * @dev Internal function that sets management\\n   */\\n  function _setPermissionManager(\\n    address _newManager,\\n    address _contract,\\n    bytes32 _role\\n  ) internal {\\n    require(_newManager > address(0x0), \\\"_newManager should be a real address\\\");\\n\\n    permissionManager[_contract][_role] = _newManager;\\n    emit ChangePermissionManager(_contract, _role, _newManager);\\n  }\\n}\\n\",\"keccak256\":\"0x3e1d7e3c494b07a3e861395b965acd1651733c5b53c40bd51f0961707eb18e74\",\"license\":\"MIT\"},\"contracts/_library/authentication/Secured.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SettleMint.com\\n/**\\n * Copyright (C) SettleMint NV - All Rights Reserved\\n *\\n * Use of this file is strictly prohibited without an active license agreement.\\n * Distribution of this file, via any medium, is strictly prohibited.\\n *\\n * For license inquiries, contact hello@settlemint.com\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./GateKeeper.sol\\\";\\nimport \\\"../utility/conversions/Converter.sol\\\";\\n\\n/**\\n * @title Executes role-based permission checks\\n */\\ncontract Secured is Converter {\\n  GateKeeper public gateKeeper;\\n\\n  modifier auth(bytes32 _role) {\\n    require(canPerform(msg.sender, _role), \\\"Sender does not have the correct role\\\");\\n    _;\\n  }\\n\\n  modifier authMany(bytes32[] memory _roles) {\\n    bool hasRole = false;\\n    for (uint256 i = 0; i < _roles.length; i++) {\\n      if (canPerform(msg.sender, _roles[i])) {\\n        hasRole = true;\\n        break;\\n      }\\n    }\\n    require(hasRole == true, \\\"Sender does not have the correct role\\\");\\n    _;\\n  }\\n\\n  modifier authWithCustomReason(bytes32 _role, string memory reason) {\\n    require(canPerform(msg.sender, _role), reason);\\n    _;\\n  }\\n\\n  modifier authManyWithCustomReason(bytes32[] memory _roles, string memory reason) {\\n    bool hasRole = false;\\n    for (uint256 i = 0; i < _roles.length; i++) {\\n      if (canPerform(msg.sender, _roles[i])) {\\n        hasRole = true;\\n        break;\\n      }\\n    }\\n    require(hasRole == true, reason);\\n    _;\\n  }\\n\\n  constructor(address _gateKeeper) {\\n    gateKeeper = GateKeeper(_gateKeeper);\\n  }\\n\\n  /**\\n   * @notice Internal function to check if the address has the required role\\n   */\\n  function canPerform(address _sender, bytes32 _role) internal view returns (bool) {\\n    return address(gateKeeper) == address(0x0) || gateKeeper.hasPermission(_sender, address(this), _role);\\n  }\\n}\\n\",\"keccak256\":\"0x2a06506187bf8e569ca61ba9ab159878d4236e2191d00d41f4e830a43cc4108f\",\"license\":\"MIT\"},\"contracts/_library/authentication/interfaces/IRoleRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SettleMint.com\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title RoleRegistry\\n * @dev The RoleRegistry contract defines the methods and data structures to\\n * record if addresses have certain roles or not.\\n */\\nabstract contract IRoleRegistry {\\n  event Designated(address _address);\\n  event Discharged(address _address);\\n  event RoleRegistryCreated(address _address);\\n\\n  /**\\n   * @dev Checks if an address has a certain role\\n   * @param _address The address to check for the role.\\n   * @return hasTheRole A boolean that is True if the address has the role.\\n   */\\n  function hasRole(address _address) public view virtual returns (bool hasTheRole);\\n\\n  /**\\n   * @dev Gives the role to an address\\n   * @param _address The address to designate the role to.\\n   */\\n  function designate(address _address) public virtual;\\n\\n  /**\\n   * @dev Removes the role from an address\\n   * @param _address The address to discharge fromn the role.\\n   */\\n  function discharge(address _address) public virtual;\\n}\\n\",\"keccak256\":\"0xed8900bb78ba684d922a9afc8d8bdf86575c6653a7a60eae7bbe06bccdb79285\",\"license\":\"MIT\"},\"contracts/_library/provenance/statemachine/StateMachine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SettleMint.com\\n/**\\n * Copyright (C) SettleMint NV - All Rights Reserved\\n *\\n * Use of this file is strictly prohibited without an active license agreement.\\n * Distribution of this file, via any medium, is strictly prohibited.\\n *\\n * For license inquiries, contcontact hello@settlemint.com\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../authentication/Secured.sol\\\";\\n\\n/**\\n * @title Base contract for state machines\\n */\\nabstract contract StateMachine is Secured {\\n  event Transition(address sender, bytes32 fromState, bytes32 toState);\\n\\n  struct State {\\n    // a boolean to check if the state is actually created\\n    bool hasBeenCreated;\\n    // a mapping of functions that can be executed when in this state\\n    mapping(bytes4 => bool) allowedFunctions;\\n    // a list of all the roles that have been configured for this state\\n    bytes32[] allowedRoles;\\n    // a list of all the preconditions that have been configured for this state\\n    function(bytes32, bytes32) internal view[] preConditions;\\n    // a list of callbacks to execute before the state transition completes\\n    function(bytes32, bytes32) internal[] callbacks;\\n    // a list of states that can be transitioned to\\n    bytes32[] nextStates;\\n    // function that executes logic and then does a StateTransition\\n    bytes4 preFunction;\\n  }\\n\\n  struct StateTransition {\\n    bytes32 fromState;\\n    bytes32 toState;\\n    address actor;\\n    uint256 timestamp;\\n  }\\n\\n  StateTransition[] public history;\\n\\n  mapping(bytes32 => State) internal states;\\n  bytes32[] internal possibleStates;\\n  bytes32 internal currentState;\\n\\n  // a list of selectors that might be allowed functions\\n  bytes4[] internal knownSelectors;\\n  mapping(bytes4 => bool) internal knownSelector;\\n\\n  /**\\n   * @notice Modifier to ensure the statemachine was setup\\n   */\\n  modifier checkStateMachineSetup() {\\n    require(possibleStates.length > 0, \\\"this statemachine has not been setup yet\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Modifier to secure functions for a specific state\\n   */\\n  modifier checkAllowedFunction() {\\n    require(states[currentState].allowedFunctions[msg.sig], \\\"this function is not allowed in this state\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Modifier that checks if we can trigger a transition between the current state and the next state\\n   */\\n  modifier checkTransitionCriteria(bytes32 toState) {\\n    checkAllTransitionCriteria(getCurrentState(), toState);\\n    _;\\n  }\\n\\n  modifier doesStateExist(bytes32 state) {\\n    require(states[state].hasBeenCreated, \\\"the state has not been created yet\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns the length of the history\\n   */\\n  function getHistoryLength() public view returns (uint256) {\\n    return history.length;\\n  }\\n\\n  /**\\n   * @notice Returns history as tuple for given index.\\n   * @dev Requires the index to be within the bounds of the history array\\n   */\\n  function getHistory(uint256 index)\\n    public\\n    view\\n    returns (\\n      bytes32 fromState,\\n      bytes32 toState,\\n      address actor,\\n      uint256 timestamp\\n    )\\n  {\\n    require(index >= 0 && index < history.length, \\\"Index out of bounds\\\");\\n    return (history[index].fromState, history[index].toState, history[index].actor, history[index].timestamp);\\n  }\\n\\n  /**\\n   * @notice Returns the name of the current state of this object.\\n   * @dev Requires the current state to be configured before calling this function\\n   */\\n  function getCurrentState() public view returns (bytes32 state) {\\n    require(states[currentState].hasBeenCreated, \\\"the initial state has not been created yet\\\");\\n    return currentState;\\n  }\\n\\n  /**\\n   * @notice Returns a list of all the possible states of this object.\\n   */\\n  function getAllStates() public view returns (bytes32[] memory allStates) {\\n    return possibleStates;\\n  }\\n\\n  /**\\n   * @notice Returns a list of all the possible next states of the current state.\\n   */\\n  function getNextStates() public view returns (bytes32[] memory nextStates) {\\n    return states[currentState].nextStates;\\n  }\\n\\n  /**\\n   * @notice Returns state as tuple for give state.\\n   */\\n  function getState(bytes32 state)\\n    public\\n    view\\n    returns (\\n      bytes32 name,\\n      bytes32[] memory nextStates,\\n      bytes32[] memory allowedRoles,\\n      bytes4[] memory allowedFunctions,\\n      bytes4 preFunction\\n    )\\n  {\\n    State storage s = states[state]; // copy to memory\\n\\n    uint8 counter = 0;\\n    bytes4[] memory tmp = new bytes4[](knownSelectors.length);\\n    for (uint256 i = 0; i < knownSelectors.length; i++) {\\n      if (states[state].allowedFunctions[knownSelectors[i]]) {\\n        tmp[counter] = knownSelectors[i];\\n        counter += 1;\\n      }\\n    }\\n\\n    bytes4[] memory selectors = new bytes4[](counter);\\n    for (uint256 j = 0; j < counter; j++) {\\n      selectors[j] = tmp[j];\\n    }\\n\\n    return (state, s.nextStates, s.allowedRoles, selectors, s.preFunction);\\n  }\\n\\n  /**\\n   * @notice Transitions the state and executes all callbacks.\\n   * @dev Emits a Transition event after a successful transition.\\n   */\\n  function transitionState(bytes32 toState) public checkStateMachineSetup checkTransitionCriteria(toState) {\\n    bytes32 oldState = currentState;\\n    currentState = toState;\\n\\n    function(bytes32, bytes32) internal[] storage callbacks = states[toState].callbacks;\\n    for (uint256 i = 0; i < callbacks.length; i++) {\\n      callbacks[i](oldState, toState);\\n    }\\n\\n    history.push(\\n      StateTransition({fromState: oldState, toState: toState, actor: msg.sender, timestamp: block.timestamp})\\n    );\\n\\n    emit Transition(msg.sender, oldState, currentState);\\n  }\\n\\n  /**\\n   * @dev Abstract function to setup te state machine configuration\\n   */\\n  function setupStateMachine() internal virtual;\\n\\n  function createState(bytes32 stateName) internal {\\n    require(!states[stateName].hasBeenCreated, \\\"this state has already been created\\\");\\n    states[stateName].hasBeenCreated = true;\\n    possibleStates.push(stateName);\\n  }\\n\\n  function addRoleForState(bytes32 state, bytes32 role) internal doesStateExist(state) {\\n    states[state].allowedRoles.push(role);\\n  }\\n\\n  function addAllowedFunctionForState(bytes32 state, bytes4 allowedFunction) internal doesStateExist(state) {\\n    if (!knownSelector[allowedFunction]) {\\n      knownSelector[allowedFunction] = true;\\n      knownSelectors.push(allowedFunction);\\n    }\\n    states[state].allowedFunctions[allowedFunction] = true;\\n  }\\n\\n  function addNextStateForState(bytes32 state, bytes32 nextState)\\n    internal\\n    doesStateExist(state)\\n    doesStateExist(nextState)\\n  {\\n    states[state].nextStates.push(nextState);\\n  }\\n\\n  function addCallbackForState(bytes32 state, function(bytes32, bytes32) internal callback)\\n    internal\\n    doesStateExist(state)\\n  {\\n    states[state].callbacks.push(callback);\\n  }\\n\\n  function addPreConditionForState(bytes32 state, function(bytes32, bytes32) internal view preCondition)\\n    internal\\n    doesStateExist(state)\\n  {\\n    states[state].preConditions.push(preCondition);\\n  }\\n\\n  function setPreFunctionForState(bytes32 state, bytes4 functionSig) internal doesStateExist(state) {\\n    states[state].preFunction = functionSig;\\n  }\\n\\n  /**\\n   * @notice Configures the initial state of an object\\n   */\\n  function setInitialState(bytes32 initialState) internal {\\n    require(states[initialState].hasBeenCreated, \\\"the initial state has not been created yet\\\");\\n    require(\\n      currentState == 0,\\n      \\\"the current state has already been set, so you cannot configure the initial state and override it\\\"\\n    );\\n    currentState = initialState;\\n  }\\n\\n  /**\\n   * @notice Function that checks if we can trigger a transition between two states\\n   * @dev This checks if the states exist, if the user has a role to go to the chosen next state and\\n   * @dev and if all the preconditions give the ok.\\n   */\\n  function checkAllTransitionCriteria(bytes32 fromState, bytes32 toState) private view {\\n    require(states[fromState].hasBeenCreated, \\\"the from state has not been configured in this object\\\");\\n    require(states[toState].hasBeenCreated, \\\"the to state has not been configured in this object\\\");\\n    require(\\n      checkNextStates(fromState, toState),\\n      \\\"the requested next state is not an allowed next state for this transition\\\"\\n    );\\n    require(\\n      checkAllowedRoles(toState),\\n      \\\"the sender of this transaction does not have a role that allows transition between the from and to states\\\"\\n    );\\n    checkPreConditions(fromState, toState);\\n  }\\n\\n  /**\\n   * @notice Checks if it is allowed to transition between the given states\\n   */\\n  function checkNextStates(bytes32 fromState, bytes32 toState) private view returns (bool hasNextState) {\\n    hasNextState = false;\\n    bytes32[] storage nextStates = states[fromState].nextStates;\\n    for (uint256 i = 0; i < nextStates.length; i++) {\\n      if (keccak256(abi.encodePacked(nextStates[i])) == keccak256(abi.encodePacked(toState))) {\\n        hasNextState = true;\\n        break;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks all the custom preconditions that determine if it is allowed to transition to a next state\\n   * @dev Make sure the preconditions require or assert their checks and have an understandable error message\\n   */\\n  function checkPreConditions(bytes32 fromState, bytes32 toState) private view {\\n    function(bytes32, bytes32) internal view[] storage preConditions = states[toState].preConditions;\\n    for (uint256 i = 0; i < preConditions.length; i++) {\\n      preConditions[i](fromState, toState);\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if the sender has a role that is allowed to transition to a next state\\n   */\\n  function checkAllowedRoles(bytes32 toState) private view returns (bool isAllowed) {\\n    isAllowed = false;\\n    bytes32[] storage allowedRoles = states[toState].allowedRoles;\\n    if (allowedRoles.length == 0) {\\n      isAllowed = true;\\n    }\\n    for (uint256 i = 0; i < allowedRoles.length; i++) {\\n      if (canPerform(msg.sender, allowedRoles[i])) {\\n        isAllowed = true;\\n        break;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x515ede4501cfe0dcacc7cc3da9b1dd04d4d50f68e12a5e20bc81191f88f6f893\",\"license\":\"MIT\"},\"contracts/_library/provenance/statemachine/StateMachineFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SettleMint.com\\n/**\\n * Copyright (C) SettleMint NV - All Rights Reserved\\n *\\n * Use of this file is strictly prohibited without an active license agreement.\\n * Distribution of this file, via any medium, is strictly prohibited.\\n *\\n * For license inquiries, contact hello@settlemint.com\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../authentication/Secured.sol\\\";\\nimport \\\"../../utility/ui/UIFieldDefinitions.sol\\\";\\nimport \\\"./StateMachine.sol\\\";\\nimport \\\"./StateMachineRegistry.sol\\\";\\n\\n/**\\n * @title Base contract for state machine factories\\n */\\ncontract StateMachineFactory is UIFieldDefinitions, Secured {\\n  bytes32 public constant CREATE_STATEMACHINE_ROLE = \\\"CREATE_STATEMACHINE_ROLE\\\";\\n  StateMachineRegistry internal _registry;\\n\\n  event StateMachineCreated(address statemachine);\\n\\n  constructor(GateKeeper gateKeeper, StateMachineRegistry registry) Secured(address(gateKeeper)) {\\n    _registry = registry;\\n  }\\n\\n  /**\\n   * @notice Sets the value of `_uiFieldDefinitionsHash`\\n   * @param uiFieldDefinitionsHash value to assign to _uiFieldDefinitionsHash\\n   */\\n  function setUIFieldDefinitionsHash(string memory uiFieldDefinitionsHash)\\n    public\\n    override\\n    authWithCustomReason(UPDATE_UIFIELDDEFINITIONS_ROLE, \\\"Sender needs UPDATE_UIFIELDDEFINITIONS_ROLE\\\")\\n  {\\n    _uiFieldDefinitionsHash = uiFieldDefinitionsHash;\\n  }\\n\\n  /**\\n   * @notice Retrieves the value of `_uiFieldDefinitionsHash`\\n   */\\n  function getUIFieldDefinitionsHash() public view override returns (string memory) {\\n    return _uiFieldDefinitionsHash;\\n  }\\n\\n  // Due to the fact that the param list is dependant on the statemachine implementation,\\n  // this cannot be an abstract contract but you still have to implement the create() function.\\n  // This is a good example. Make sure to emit the StateMachineCreated event.\\n  //\\n  // function create(\\n  //   uint256 amount,\\n  //   string memory proof,\\n  //   string memory ipfsFieldContainerHash\\n  // )\\n  //   public\\n  //   auth(CREATE_STATEMACHINE_ROLE)\\n  // {\\n  //   require(amount > 0, \\\"The amount of an expense cannot be zero\\\");\\n  //   bytes memory memProof = bytes(proof);\\n  //   require(memProof.length > 0, \\\"A proof file is required for all expenses\\\");\\n  //\\n  //   Expense expense = new Expense(\\n  //     gateKeeper,\\n  //     amount,\\n  //     proof,\\n  //     ipfsFieldContainerHash,\\n  //     _uiFieldDefinitionsHash,\\n  //     msg.sender\\n  //   );\\n\\n  //   // Give every role registry a single permission on the newly created expense.\\n  //   bytes32[] memory roles = expense.getRoles();\\n  //   for (uint i = 0; i < roles.length; i++) {\\n  //     gateKeeper.createPermission(\\n  //       gateKeeper.getRoleRegistryAddress(roles[i]),\\n  //       address(expense),\\n  //       roles[i],\\n  //       address(this)\\n  //     );\\n  //   }\\n\\n  //   _registry.insert(address(expense), msg.sender);\\n  //   emit StateMachineCreated(msg.sender,address(expense),amount);\\n  // }\\n}\\n\",\"keccak256\":\"0xe58120b8485ef4ef984169f68ced986e9f136edddee257aa694649820701b616\",\"license\":\"MIT\"},\"contracts/_library/provenance/statemachine/StateMachineRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SettleMint.com\\n/**\\n * Copyright (C) SettleMint NV - All Rights Reserved\\n *\\n * Use of this file is strictly prohibited without an active license agreement.\\n * Distribution of this file, via any medium, is strictly prohibited.\\n *\\n * For license inquiries, contact hello@settlemint.com\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../authentication/Secured.sol\\\";\\nimport \\\"../../utility/syncing/Syncable.sol\\\";\\nimport \\\"./StateMachine.sol\\\";\\n\\n/**\\n * @title Base contract for state machine registries\\n */\\ncontract StateMachineRegistry is Secured, Syncable {\\n  event StateMachineRegistered(address statemachine);\\n\\n  bytes32 public constant INSERT_STATEMACHINE_ROLE = \\\"INSERT_STATEMACHINE_ROLE\\\";\\n\\n  mapping(address => StateMachine) internal _stateMachines;\\n  address[] internal _stateMachineIndex;\\n\\n  constructor(address gateKeeper) Secured(gateKeeper) {}\\n\\n  /**\\n   * @notice Inserts a statemachine into the registry\\n   * @dev Emits the StateMachineRegistered event after the state machine has been included to the registry\\n   * @param statemachine the state machine's address\\n   */\\n  function insert(address statemachine)\\n    public\\n    authWithCustomReason(INSERT_STATEMACHINE_ROLE, \\\"Sender needs INSERT_STATEMACHINE_ROLE\\\")\\n  {\\n    _stateMachines[statemachine] = StateMachine(statemachine);\\n    _stateMachineIndex.push(statemachine);\\n    emit StateMachineRegistered(statemachine);\\n  }\\n\\n  /**\\n   * @notice Returns the length of the state machine index\\n   * @dev Returns the length of the state machine index\\n   * @return length the amount of items in the state machine index\\n   */\\n  function getIndexLength() public view override returns (uint256 length) {\\n    length = _stateMachineIndex.length;\\n  }\\n\\n  function getByIndex(uint256 index) public view returns (address key, address contractAddress) {\\n    return getByKey(_stateMachineIndex[index]);\\n  }\\n\\n  function getByKey(address someKey) public view returns (address key, address contractAddress) {\\n    key = someKey;\\n    contractAddress = address(_stateMachines[someKey]);\\n  }\\n\\n  /**\\n   * @notice Retrieves the state machine index\\n   * @return index an array with the addresses of all statemachines\\n   */\\n  function getIndex() public view returns (address[] memory index) {\\n    return _stateMachineIndex;\\n  }\\n}\\n\",\"keccak256\":\"0xabde55dc724bd34b7124bb5428fff3a860238c13cef2cf83c1fd3f5edb3b1ce1\",\"license\":\"MIT\"},\"contracts/_library/utility/conversions/Converter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SettleMint.com\\n/**\\n * Copyright (C) SettleMint NV - All Rights Reserved\\n *\\n * Use of this file is strictly prohibited without an active license agreement.\\n * Distribution of this file, via any medium, is strictly prohibited.\\n *\\n * For license inquiries, contact hello@settlemint.com\\n */\\n\\npragma solidity ^0.8.0;\\n\\ncontract Converter {\\n  function addressToString(address data) internal pure returns (string memory) {\\n    bytes memory s = new bytes(40);\\n    for (uint256 i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint256(uint160(data)) / (2**(8 * (19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2 * i] = char(hi);\\n      s[2 * i + 1] = char(lo);\\n    }\\n    return string(s);\\n  }\\n\\n  function char(bytes1 b) internal pure returns (bytes1 c) {\\n    if (uint8(b) < 10) {\\n      return bytes1(uint8(b) + 0x30);\\n    }\\n    return bytes1(uint8(b) + 0x57);\\n  }\\n\\n  function bytes32ToString(bytes32 x) internal pure returns (string memory) {\\n    bytes memory bytesString = new bytes(32);\\n    uint256 charCount = 0;\\n    for (uint256 j = 0; j < 32; j++) {\\n      bytes1 charr = bytes1(bytes32(uint256(x) * 2**(8 * j)));\\n      if (charr != 0) {\\n        bytesString[charCount] = charr;\\n        charCount++;\\n      }\\n    }\\n    bytes memory bytesStringTrimmed = new bytes(charCount);\\n    for (uint256 k = 0; k < charCount; k++) {\\n      bytesStringTrimmed[k] = bytesString[k];\\n    }\\n    return string(bytesStringTrimmed);\\n  }\\n\\n  function uintToString(uint256 i) internal pure returns (string memory) {\\n    unchecked {\\n      if (i == 0) {\\n        return \\\"0\\\";\\n      }\\n\\n      uint256 j = i;\\n      uint256 length;\\n      while (j != 0) {\\n        length++;\\n        j /= 10;\\n      }\\n\\n      uint256 ii = i;\\n      bytes memory bstr = new bytes(length);\\n      uint256 k = length - 1;\\n      while (ii != 0) {\\n        bstr[k--] = bytes1(uint8(48 + (ii % 10)));\\n        ii /= 10;\\n      }\\n\\n      return string(bstr);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7b4a1f950a299fd21d157843c75500f7c5e3722bfb957625c5df9438431d52c4\",\"license\":\"MIT\"},\"contracts/_library/utility/metadata/FileFieldContainer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SettleMint.com\\n/**\\n * Copyright (C) SettleMint NV - All Rights Reserved\\n *\\n * Use of this file is strictly prohibited without an active license agreement.\\n * Distribution of this file, via any medium, is strictly prohibited.\\n *\\n * For license inquiries, contact hello@settlemint.com\\n */\\n\\npragma solidity ^0.8.0;\\n\\ncontract FileFieldContainer {\\n  bytes32[] internal _fileKeys;\\n  mapping(bytes32 => bool) internal _knownFileKeys;\\n  mapping(bytes32 => string) internal _fileFieldsMap;\\n\\n  function setContractFile(bytes32 key, string memory file) public {\\n    if (!_knownFileKeys[key]) {\\n      _fileKeys.push(key);\\n      _knownFileKeys[key] = true;\\n    }\\n\\n    _fileFieldsMap[key] = file;\\n  }\\n}\\n\",\"keccak256\":\"0xd0104875dc471508786a255a4aee785a0ce1c73e678a512e40fff405a8b907b8\",\"license\":\"MIT\"},\"contracts/_library/utility/metadata/IpfsFieldContainer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SettleMint.com\\n/**\\n * Copyright (C) SettleMint NV - All Rights Reserved\\n *\\n * Use of this file is strictly prohibited without an active license agreement.\\n * Distribution of this file, via any medium, is strictly prohibited.\\n *\\n * For license inquiries, contact hello@settlemint.com\\n */\\n\\npragma solidity ^0.8.0;\\n\\ncontract IpfsFieldContainer {\\n  bytes32 public constant UPDATE_IPFSCONTAINERHASH_ROLE = \\\"UPDATE_IPFSCONTAINERHASH_ROLE\\\";\\n  string public _ipfsFieldContainerHash;\\n\\n  function getIpfsFieldContainerHash() public view virtual returns (string memory) {\\n    return _ipfsFieldContainerHash;\\n  }\\n\\n  function setIpfsFieldContainerHash(string memory ipfsFieldContainerHash) public virtual {\\n    _ipfsFieldContainerHash = ipfsFieldContainerHash;\\n  }\\n}\\n\",\"keccak256\":\"0x30b8c3198d27e0985baaf49642971d0e34586bbf5e88dc9c735079c46ddbc963\",\"license\":\"MIT\"},\"contracts/_library/utility/syncing/Syncable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SettleMint.com\\n/**\\n * Copyright (C) SettleMint NV - All Rights Reserved\\n *\\n * Use of this file is strictly prohibited without an active license agreement.\\n * Distribution of this file, via any medium, is strictly prohibited.\\n *\\n * For license inquiries, contact hello@settlemint.com\\n */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title The listable item should also implement\\n */\\nabstract contract Syncable {\\n  function getIndexLength() public view virtual returns (uint256 length);\\n\\n  // Waiting for the time we can return structs from functions!\\n  // function getByIndex(uint index) constant public returns (address key, bool hasRole){\\n  // function getByKey(address _key) constant public returns (address key, bool hasRole){\\n\\n  // Since ABIEncoderV2 we can now return the entire registry as address list in one call\\n  // function getIndex() constant public returns (address[] index) {\\n\\n  // Since ABIEncoderV2 we can now return the entire registry as an array of structs in one call\\n  // function getContents() constant public returns (Struct[] memory items) {\\n}\\n\",\"keccak256\":\"0x6a47441ebbf54d1c1f572a494eedd01f1f894289168a457af32a4a64b355b545\",\"license\":\"MIT\"},\"contracts/_library/utility/ui/UIFieldDefinitions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SettleMint.com\\n/**\\n * Copyright (C) SettleMint NV - All Rights Reserved\\n *\\n * Use of this file is strictly prohibited without an active license agreement.\\n * Distribution of this file, via any medium, is strictly prohibited.\\n *\\n * For license inquiries, contact hello@settlemint.com\\n */\\n\\n// solium-disable mixedcase\\npragma solidity ^0.8.0;\\n\\nabstract contract UIFieldDefinitions {\\n  bytes32 public constant UPDATE_UIFIELDDEFINITIONS_ROLE = \\\"UPDATE_UIFIELDDEFINITIONS_ROLE\\\";\\n  string internal _uiFieldDefinitionsHash;\\n\\n  function getUIFieldDefinitionsHash() public view virtual returns (string memory);\\n\\n  function setUIFieldDefinitionsHash(string memory uiFieldDefinitionsHash) public virtual;\\n}\\n\",\"keccak256\":\"0x58a04352f12920dacccea667b0aac5869c6759f446a6f147727d79654b340c48\",\"license\":\"MIT\"},\"contracts/supplychain/SupplyChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SettleMint.com\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../_library/authentication/Secured.sol\\\";\\nimport \\\"../_library/provenance/statemachine/StateMachine.sol\\\";\\nimport \\\"../_library/utility/metadata/IpfsFieldContainer.sol\\\";\\nimport \\\"../_library/utility/metadata/FileFieldContainer.sol\\\";\\nimport \\\"../_library/utility/conversions/Converter.sol\\\";\\n//import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/**\\n * SupplyChain\\n\\n *\\n * @title State machine for SupplyChain\\n */\\ncontract SupplyChain is Converter, StateMachine, IpfsFieldContainer, FileFieldContainer {\\n\\n  //IERC20 private _token = IERC20(TokenAddress);\\n\\n  bytes32 public constant WHOLESALE_ORDER_FULFILLED = \\\"WHOLESALE_ORDER_FULFILLED\\\";\\n  bytes32 public constant WOOL_TESTED = \\\"WOOL_TESTED\\\";\\n  bytes32 public constant WOOL_TEST_GRADE_FEEDBACK = \\\"WOOL_TEST_GRADE_FEEDBACK\\\";\\n  bytes32 public constant WOOL_GRADED = \\\"WOOL_GRADED\\\";\\n  bytes32 public constant RETAIL_ORDER_PLACED = \\\"RETAIL_ORDER_PLACED\\\";\\n  bytes32 public constant RETAIL_ORDER_UNFULFILLED = \\\"RETAIL_ORDER_UNFULFILLED\\\";\\n  bytes32 public constant RETAIL_ORDER_FULFILLED = \\\"RETAIL_ORDER_FULFILLED\\\";\\n  bytes32 public constant ORDER_CANCELLED = \\\"ORDER_CANCELLED\\\";\\n\\n  bytes32 public constant ROLE_ADMIN = \\\"ROLE_ADMIN\\\";\\n  bytes32 public constant ROLE_CONGLOMERATE = \\\"ROLE_CONGLOMERATE\\\";\\n  bytes32 public constant ROLE_RETAILER = \\\"ROLE_RETAILER\\\";\\n  bytes32 public constant ROLE_AWTA = \\\"ROLE_AWTA\\\";\\n  bytes32 public constant ROLE_AWEX = \\\"ROLE_AWEX\\\";\\n  bytes32 public constant ROLE_WHOLESALER = \\\"ROLE_WHOLESALER\\\";\\n\\n  bytes32[] public _roles = [ROLE_ADMIN, ROLE_WHOLESALER,ROLE_CONGLOMERATE, ROLE_RETAILER, ROLE_AWTA, ROLE_AWEX ];\\n\\n  string public _uiFieldDefinitionsHash;\\n  string public _Order_Number;\\n\\n  constructor(\\n    address gateKeeper,\\n    string memory Order_Number,\\n    string memory ipfsFieldContainerHash,\\n    string memory uiFieldDefinitionsHash\\n  ) Secured(gateKeeper) {\\n    _Order_Number = Order_Number;\\n    _ipfsFieldContainerHash = ipfsFieldContainerHash;\\n    _uiFieldDefinitionsHash = uiFieldDefinitionsHash;\\n    setupStateMachine();\\n  }\\n\\n  /**\\n   * @notice Updates expense properties\\n   * @param Order_Number It is the order Identification Number\\n   * @param ipfsFieldContainerHash ipfs hash of supplychainfinance metadata\\n   */\\n  function edit(string memory Order_Number, string memory ipfsFieldContainerHash) public {\\n    _Order_Number = Order_Number;\\n    _ipfsFieldContainerHash = ipfsFieldContainerHash;\\n  }\\n\\n  /**\\n   * @notice Returns a DID of the supplychainfinance\\n   * @dev Returns a unique DID (Decentralized Identifier) for the supplychainfinance.\\n   * @return string representing the DID of the supplychainfinance\\n   */\\n  function DID() public view returns (string memory) {\\n    return string(abi.encodePacked(\\\"did:demo:supplychainfinance:\\\", _Order_Number));\\n  }\\n\\n  /**\\n   * @notice Returns all the roles for this contract\\n   * @return bytes32[] array of raw bytes representing the roles\\n   */\\n  function getRoles() public view returns (bytes32[] memory) {\\n    return _roles;\\n  }\\n\\n  function setupStateMachine() internal override {\\n    //create all states\\n\\n    createState(WHOLESALE_ORDER_FULFILLED);\\n    createState(WOOL_TESTED);\\n    createState(WOOL_TEST_GRADE_FEEDBACK);\\n    createState(WOOL_GRADED);\\n    createState(RETAIL_ORDER_PLACED);\\n    createState(RETAIL_ORDER_UNFULFILLED);\\n    createState(RETAIL_ORDER_FULFILLED);\\n\\n    // add properties\\n\\n     addNextStateForState(WHOLESALE_ORDER_FULFILLED, WOOL_TESTED);\\n    addNextStateForState(WOOL_TESTED, WOOL_TEST_GRADE_FEEDBACK);\\n\\n    addNextStateForState(WOOL_TEST_GRADE_FEEDBACK, ORDER_CANCELLED);\\n    addNextStateForState(WOOL_TEST_GRADE_FEEDBACK, RETAIL_ORDER_FULFILLED);\\n    addNextStateForState(WOOL_TESTED, WOOL_GRADED);\\n    addNextStateForState(WOOL_GRADED, RETAIL_ORDER_PLACED);\\n    addNextStateForState(RETAIL_ORDER_PLACED, RETAIL_ORDER_UNFULFILLED);\\n    addNextStateForState(RETAIL_ORDER_UNFULFILLED, WOOL_TESTED);\\n    addNextStateForState(RETAIL_ORDER_PLACED, RETAIL_ORDER_FULFILLED);\\n\\n    addRoleForState(WHOLESALE_ORDER_FULFILLED, ROLE_WHOLESALER);\\n    addRoleForState(WOOL_TESTED, ROLE_AWTA);\\n    addRoleForState(WOOL_GRADED, ROLE_AWEX);\\n    addRoleForState(RETAIL_ORDER_PLACED, ROLE_RETAILER);\\n    addRoleForState(RETAIL_ORDER_UNFULFILLED, ROLE_RETAILER);\\n    //addRoleForState(WOOL_TEST_GRADE_FEEDBACK, ROLE_AWEX& ROLE_AWTA, adminAddress);\\n    addRoleForState(RETAIL_ORDER_FULFILLED, ROLE_RETAILER);\\n    setInitialState(WHOLESALE_ORDER_FULFILLED);\\n  }\\n}\\n\",\"keccak256\":\"0x14fa7a19de24d35c6e4c69bc3b7ed8f8bacf2428718462cdb42a6745402ed520\",\"license\":\"MIT\"},\"contracts/supplychain/SupplyChainFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SettleMint.com\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../_library/provenance/statemachine/StateMachineFactory.sol\\\";\\nimport \\\"./SupplyChain.sol\\\";\\nimport \\\"./SupplyChainRegistry.sol\\\";\\n\\n/**\\n * @title Factory contract for supplychain state machines\\n */\\ncontract SupplyChainFactory is StateMachineFactory {\\n  constructor(GateKeeper gateKeeper, SupplyChainRegistry registry) StateMachineFactory(gateKeeper, registry) {}\\n\\n  /**\\n   * @notice Create new supplychain\\n   * @dev Factory method to create a new supplychain. Emits StateMachineCreated event.\\n   * @param Order_Number Unique Identification Number\\n\\n   * @param ipfsFieldContainerHash ipfs hash of supplychain metadata\\n   */\\n  function create(string memory Order_Number, string memory ipfsFieldContainerHash)\\n    public\\n    authWithCustomReason(CREATE_STATEMACHINE_ROLE, \\\"Sender needs CREATE_STATEMACHINE_ROLE\\\")\\n  {\\n    bytes memory memProof = bytes(Order_Number);\\n    require(memProof.length > 0, \\\"A Order_Number is required\\\");\\n\\n    SupplyChain supplychain = new SupplyChain(\\n      address(gateKeeper),\\n      Order_Number,\\n      ipfsFieldContainerHash,\\n      _uiFieldDefinitionsHash\\n    );\\n\\n    // Give every role registry a single permission on the newly created expense.\\n    bytes32[] memory roles = supplychain.getRoles();\\n    for (uint256 i = 0; i < roles.length; i++) {\\n      gateKeeper.createPermission(\\n        gateKeeper.getRoleRegistryAddress(roles[i]),\\n        address(supplychain),\\n        roles[i],\\n        address(this)\\n      );\\n    }\\n\\n    _registry.insert(address(supplychain));\\n    emit StateMachineCreated(address(supplychain));\\n  }\\n}\\n\",\"keccak256\":\"0xd405ba061261bf7ed8c22f25ccae85a789857f6cabdc87158a04fb789cabbebc\",\"license\":\"MIT\"},\"contracts/supplychain/SupplyChainRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SettleMint.com\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../_library/provenance/statemachine/StateMachineRegistry.sol\\\";\\n\\n/**\\n * @title Registry contract for supplychain state machines\\n */\\ncontract SupplyChainRegistry is StateMachineRegistry {\\n  constructor(address gateKeeper) StateMachineRegistry(gateKeeper) {}\\n}\\n\",\"keccak256\":\"0x6d2be533af9a012cedeb0bcabb0fe5cfb40544e0680ce18de6cef2a84b76183a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516130ff3803806130ff83398101604081905261002f91610078565b600180546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556100b2565b6001600160a01b038116811461007557600080fd5b50565b6000806040838503121561008b57600080fd5b825161009681610060565b60208401519092506100a781610060565b809150509250929050565b61303e806100c16000396000f3fe60806040523480156200001157600080fd5b50600436106200006a5760003560e01c8063198e2b8a146200006f5780631f0f992a1462000088578063309c70cf14620000c3578063459b9af914620000e657806345d61ded14620000ff57806382f68683146200012c575b600080fd5b62000086620000803660046200081d565b62000143565b005b620000b07f5550444154455f55494649454c44444546494e4954494f4e535f524f4c45000081565b6040519081526020015b60405180910390f35b620000b0774352454154455f53544154454d414348494e455f524f4c4560401b81565b620000f0620004dd565b604051620000ba9190620008d8565b60015462000113906001600160a01b031681565b6040516001600160a01b039091168152602001620000ba565b620000866200013d366004620008ed565b62000577565b774352454154455f53544154454d414348494e455f524f4c4560401b60405180606001604052806025815260200162002fe460259139620001853383620005fc565b8190620001b05760405162461bcd60e51b8152600401620001a79190620008d8565b60405180910390fd5b5083518490620002035760405162461bcd60e51b815260206004820152601a60248201527f41204f726465725f4e756d6265722069732072657175697265640000000000006044820152606401620001a7565b6001546040516000916001600160a01b0316908790879084906200022790620006a8565b6200023694939291906200096b565b604051809103906000f08015801562000253573d6000803e3d6000fd5b5090506000816001600160a01b031663710613986040518163ffffffff1660e01b815260040160006040518083038186803b1580156200029257600080fd5b505afa158015620002a7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002d1919081019062000a5c565b905060005b8151811015620004355760015482516001600160a01b039091169063be038478908290630ef9ae399086908690811062000314576200031462000b0d565b60200260200101516040518263ffffffff1660e01b81526004016200033b91815260200190565b60206040518083038186803b1580156200035457600080fd5b505afa15801562000369573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200038f919062000b23565b85858581518110620003a557620003a562000b0d565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152306064820152608401600060405180830381600087803b1580156200040657600080fd5b505af11580156200041b573d6000803e3d6000fd5b5050505080806200042c9062000b4e565b915050620002d6565b50600254604051635e48156960e11b81526001600160a01b0384811660048301529091169063bc902ad290602401600060405180830381600087803b1580156200047e57600080fd5b505af115801562000493573d6000803e3d6000fd5b50506040516001600160a01b03851681527f9133c0c22004f4e0d1b425e3f564b710f3fda1af39a2e9565a1ce53eda52f7889250602001905060405180910390a150505050505050565b606060008054620004ee906200092e565b80601f01602080910402602001604051908101604052809291908181526020018280546200051c906200092e565b80156200056d5780601f1062000541576101008083540402835291602001916200056d565b820191906000526020600020905b8154815290600101906020018083116200054f57829003601f168201915b5050505050905090565b7f5550444154455f55494649454c44444546494e4954494f4e535f524f4c4500006040518060600160405280602b815260200162002fb9602b9139620005be3383620005fc565b8190620005e05760405162461bcd60e51b8152600401620001a79190620008d8565b508251620005f6906000906020860190620006b6565b50505050565b6001546000906001600160a01b03161580620006a15750600154604051630dace25b60e31b81526001600160a01b0385811660048301523060248301526044820185905290911690636d6712d89060640160206040518083038186803b1580156200066657600080fd5b505afa1580156200067b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006a1919062000b78565b9392505050565b61241c8062000b9d83390190565b828054620006c4906200092e565b90600052602060002090601f016020900481019282620006e8576000855562000733565b82601f106200070357805160ff191683800117855562000733565b8280016001018555821562000733579182015b828111156200073357825182559160200191906001019062000716565b506200074192915062000745565b5090565b5b8082111562000741576000815560010162000746565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156200079e576200079e6200075c565b604052919050565b600082601f830112620007b857600080fd5b813567ffffffffffffffff811115620007d557620007d56200075c565b620007ea601f8201601f191660200162000772565b8181528460208386010111156200080057600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156200083157600080fd5b823567ffffffffffffffff808211156200084a57600080fd5b6200085886838701620007a6565b935060208501359150808211156200086f57600080fd5b506200087e85828601620007a6565b9150509250929050565b6000815180845260005b81811015620008b05760208185018101518683018201520162000892565b81811115620008c3576000602083870101525b50601f01601f19169290920160200192915050565b602081526000620006a1602083018462000888565b6000602082840312156200090057600080fd5b813567ffffffffffffffff8111156200091857600080fd5b6200092684828501620007a6565b949350505050565b600181811c908216806200094357607f821691505b602082108114156200096557634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b038516815260806020808301829052600091620009929084018762000888565b8381036040850152620009a6818762000888565b905083810360608501526000855481600182811c915080831680620009cc57607f831692505b868310811415620009eb57634e487b7160e01b85526022600452602485fd5b82865260208601955080801562000a0b576001811462000a1d5762000a4a565b60ff1985168752878701955062000a4a565b60008b81526020902060005b8581101562000a445781548982015290840190890162000a29565b88019650505b50939c9b505050505050505050505050565b6000602080838503121562000a7057600080fd5b825167ffffffffffffffff8082111562000a8957600080fd5b818501915085601f83011262000a9e57600080fd5b81518181111562000ab35762000ab36200075c565b8060051b915062000ac684830162000772565b818152918301840191848101908884111562000ae157600080fd5b938501935b8385101562000b015784518252938501939085019062000ae6565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121562000b3657600080fd5b81516001600160a01b0381168114620006a157600080fd5b600060001982141562000b7157634e487b7160e01b600052601160045260246000fd5b5060010190565b60006020828403121562000b8b57600080fd5b81518015158114620006a157600080fdfe610140604052692927a622afa0a226a4a760b11b60809081526e2927a622afaba427a622a9a0a622a960891b60a05270524f4c455f434f4e474c4f4d455241544560781b60c0526c2927a622afa922aa20a4a622a960991b60e05268524f4c455f4157544160b81b61010052680a49e988abe82ae8ab60bb1b610120526200008c90600b906006620007b0565b503480156200009a57600080fd5b506040516200241c3803806200241c833981016040819052620000bd9162000960565b600080546001600160a01b0319166001600160a01b0386161790558251620000ed90600d90602086019062000800565b5081516200010390600790602085019062000800565b5080516200011990600c90602084019062000800565b50620001246200012e565b5050505062000a4f565b620001486000805160206200239c8339815191526200046f565b620001616a15d3d3d317d51154d5115160aa1b6200046f565b6200017b600080516020620023fc8339815191526200046f565b620001946a15d3d3d317d1d49051115160aa1b6200046f565b620001ae600080516020620023dc8339815191526200046f565b620001c86000805160206200237c8339815191526200046f565b620001e2600080516020620023bc8339815191526200046f565b6200020b6000805160206200239c8339815191526a15d3d3d317d51154d5115160aa1b6200052d565b620002346a15d3d3d317d51154d5115160aa1b600080516020620023fc8339815191526200052d565b62000261600080516020620023fc8339815191526e13d491115497d0d05390d153131151608a1b6200052d565b6200028b600080516020620023fc833981519152600080516020620023bc8339815191526200052d565b620002b36a15d3d3d317d51154d5115160aa1b6a15d3d3d317d1d49051115160aa1b6200052d565b620002dc6a15d3d3d317d1d49051115160aa1b600080516020620023dc8339815191526200052d565b62000306600080516020620023dc8339815191526000805160206200237c8339815191526200052d565b6200032f6000805160206200237c8339815191526a15d3d3d317d51154d5115160aa1b6200052d565b62000359600080516020620023dc833981519152600080516020620023bc8339815191526200052d565b620003866000805160206200239c8339815191526e2927a622afaba427a622a9a0a622a960891b6200060d565b620003ac6a15d3d3d317d51154d5115160aa1b68524f4c455f4157544160b81b6200060d565b620003d26a15d3d3d317d1d49051115160aa1b680a49e988abe82ae8ab60bb1b6200060d565b620003fd600080516020620023dc8339815191526c2927a622afa922aa20a4a622a960991b6200060d565b620004286000805160206200237c8339815191526c2927a622afa922aa20a4a622a960991b6200060d565b62000453600080516020620023bc8339815191526c2927a622afa922aa20a4a622a960991b6200060d565b6200046d6000805160206200239c83398151915262000690565b565b60008181526002602052604090205460ff1615620004e05760405162461bcd60e51b815260206004820152602360248201527f746869732073746174652068617320616c7265616479206265656e20637265616044820152621d195960ea1b60648201526084015b60405180910390fd5b6000818152600260205260408120805460ff191660019081179091556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0155565b600082815260026020526040902054829060ff16620005895760405162461bcd60e51b815260206004820152602260248201526000805160206200235c833981519152604482015261195d60f21b6064820152608401620004d7565b600082815260026020526040902054829060ff16620005e55760405162461bcd60e51b815260206004820152602260248201526000805160206200235c833981519152604482015261195d60f21b6064820152608401620004d7565b5050600091825260026020908152604083206005018054600181018255908452922090910155565b600082815260026020526040902054829060ff16620006695760405162461bcd60e51b815260206004820152602260248201526000805160206200235c833981519152604482015261195d60f21b6064820152608401620004d7565b50600091825260026020818152604084209091018054600181018255908452922090910155565b60008181526002602052604090205460ff16620007035760405162461bcd60e51b815260206004820152602a60248201527f74686520696e697469616c20737461746520686173206e6f74206265656e20636044820152691c99585d1959081e595d60b21b6064820152608401620004d7565b60045415620007ab5760405162461bcd60e51b815260206004820152606160248201527f7468652063757272656e742073746174652068617320616c726561647920626560448201527f656e207365742c20736f20796f752063616e6e6f7420636f6e6669677572652060648201527f74686520696e697469616c20737461746520616e64206f7665727269646520696084820152601d60fa1b60a482015260c401620004d7565b600455565b828054828255906000526020600020908101928215620007ee579160200282015b82811115620007ee578251825591602001919060010190620007d1565b50620007fc9291506200087c565b5090565b8280546200080e9062000a12565b90600052602060002090601f016020900481019282620008325760008555620007ee565b82601f106200084d57805160ff1916838001178555620007ee565b82800160010185558215620007ee5791820182811115620007ee578251825591602001919060010190620007d1565b5b80821115620007fc57600081556001016200087d565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620008bb57600080fd5b81516001600160401b0380821115620008d857620008d862000893565b604051601f8301601f19908116603f0116810190828211818310171562000903576200090362000893565b816040528381526020925086838588010111156200092057600080fd5b600091505b8382101562000944578582018301518183018401529082019062000925565b83821115620009565760008385830101525b9695505050505050565b600080600080608085870312156200097757600080fd5b84516001600160a01b03811681146200098f57600080fd5b60208601519094506001600160401b0380821115620009ad57600080fd5b620009bb88838901620008a9565b94506040870151915080821115620009d257600080fd5b620009e088838901620008a9565b93506060870151915080821115620009f757600080fd5b5062000a0687828801620008a9565b91505092959194509250565b600181811c9082168062000a2757607f821691505b6020821081141562000a4957634e487b7160e01b600052602260045260246000fd5b50919050565b6118fd8062000a5f6000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c8063910fd10a1161011a578063b43857e8116100ad578063ef120a6e1161007c578063ef120a6e146104c2578063f27db0d3146104ca578063f4a979a3146104df578063fcbb5907146104f2578063fd2072921461051957600080fd5b8063b43857e814610464578063b949d9921461047b578063c8691b2a1461049b578063d391014b146104ae57600080fd5b8063a65ed23d116100e9578063a65ed23d146103cd578063a7a38f0b146103f4578063abd3fa1614610436578063b32f20391461044957600080fd5b8063910fd10a14610398578063931e0103146103a0578063a4ddb071146103bd578063a54df332146103c557600080fd5b806345d61ded1161019d57806356c57bd11161016c57806356c57bd1146103305780635878be5514610343578063694f11051461036a578063710613981461037d57806390ee9ff91461038557600080fd5b806345d61ded146102e0578063489f19eb1461030b5780634de6740e146103205780635478f4681461032857600080fd5b80632fac5b40116101d95780632fac5b4014610297578063304b1bd1146102b0578063378aa701146102c35780633e44694f146102cb57600080fd5b806309648a9d1461020b5780630d1d3bfa1461023857806319386ee01461025b5780632e2bc0d514610282575b600080fd5b61021e610219366004611454565b610532565b60405161022f9594939291906114a8565b60405180910390f35b61024d6a15d3d3d317d51154d5115160aa1b81565b60405190815260200161022f565b61024d7f574f4f4c5f544553545f47524144455f464545444241434b000000000000000081565b61028a61081a565b60405161022f9190611534565b61024d6e2927a622afaba427a622a9a0a622a960891b81565b61024d6102be366004611454565b610880565b61024d6108a1565b6102d3610921565b60405161022f9190611547565b6000546102f3906001600160a01b031681565b6040516001600160a01b03909116815260200161022f565b61031e61031936600461163f565b610949565b005b6102d3610975565b60015461024d565b61031e61033e3660046116a3565b610a03565b61024d7f52455441494c5f4f524445525f554e46554c46494c4c4544000000000000000081565b61031e610378366004611454565b610a1a565b61028a610c4b565b61024d68524f4c455f4157544160b81b81565b6102d3610ca1565b61024d7214915510525317d3d491115497d4131050d151606a1b81565b61028a610cae565b6102d3610d04565b61024d7f57484f4c4553414c455f4f524445525f46554c46494c4c45440000000000000081565b610407610402366004611454565b610d11565b60405161022f949392919093845260208401929092526001600160a01b03166040830152606082015260800190565b61024d680a49e988abe82ae8ab60bb1b81565b61024d70524f4c455f434f4e474c4f4d455241544560781b81565b61024d6c2927a622afa922aa20a4a622a960991b81565b61024d7514915510525317d3d491115497d1955311925313115160521b81565b6104076104a9366004611454565b610d54565b61024d692927a622afa0a226a4a760b11b81565b6102d3610e56565b61024d6a15d3d3d317d1d49051115160aa1b81565b61031e6104ed3660046116e0565b610edf565b61024d7f5550444154455f49504653434f4e5441494e4552484153485f524f4c4500000081565b61024d6e13d491115497d0d05390d153131151608a1b81565b60008181526002602052604081206005546060918291829185918290819067ffffffffffffffff8111156105685761056861159c565b604051908082528060200260200182016040528015610591578160200160208202803683370190505b50905060005b60055481101561069257600260008b81526020019081526020016000206001016000600583815481106105cc576105cc61171d565b6000918252602080832060088304015460079092166004026101000a90910460e01b6001600160e01b031916835282019290925260400190205460ff161561068057600581815481106106215761062161171d565b90600052602060002090600891828204019190066004029054906101000a900460e01b828460ff16815181106106595761065961171d565b6001600160e01b03199092166020928302919091019091015261067d600184611749565b92505b8061068a8161176e565b915050610597565b5060008260ff1667ffffffffffffffff8111156106b1576106b161159c565b6040519080825280602002602001820160405280156106da578160200160208202803683370190505b50905060005b8360ff16811015610742578281815181106106fd576106fd61171d565b60200260200101518282815181106107175761071761171d565b6001600160e01b0319909216602092830291909101909101528061073a8161176e565b9150506106e0565b50898460050185600201838760060160009054906101000a900460e01b838054806020026020016040519081016040528092919081815260200182805480156107aa57602002820191906000526020600020905b815481526020019060010190808311610796575b50505050509350828054806020026020016040519081016040528092919081815260200182805480156107fc57602002820191906000526020600020905b8154815260200190600101908083116107e8575b50505050509250985098509850985098505050505091939590929450565b60045460009081526002602090815260409182902060050180548351818402810184019094528084526060939283018282801561087657602002820191906000526020600020905b815481526020019060010190808311610862575b5050505050905090565b600b818154811061089057600080fd5b600091825260209091200154905081565b60045460009081526002602052604081205460ff1661091a5760405162461bcd60e51b815260206004820152602a60248201527f74686520696e697469616c20737461746520686173206e6f74206265656e20636044820152691c99585d1959081e595d60b21b60648201526084015b60405180910390fd5b5060045490565b6060600d60405160200161093591906117c4565b604051602081830303815290604052905090565b815161095c90600d9060208501906113b1565b5080516109709060079060208401906113b1565b505050565b600c805461098290611789565b80601f01602080910402602001604051908101604052809291908181526020018280546109ae90611789565b80156109fb5780601f106109d0576101008083540402835291602001916109fb565b820191906000526020600020905b8154815290600101906020018083116109de57829003601f168201915b505050505081565b8051610a169060079060208401906113b1565b5050565b600354610a7a5760405162461bcd60e51b815260206004820152602860248201527f746869732073746174656d616368696e6520686173206e6f74206265656e2073604482015267195d1d5c081e595d60c21b6064820152608401610911565b80610a8c610a866108a1565b82610f5f565b600480548382556000848152600260205260408120919291909101905b8154811015610b1457610b028386848481548110610ac957610ac961171d565b90600052602060002090600491828204019190066008029054906101000a90048015611435021767ffffffffffffffff1663ffffffff16565b80610b0c8161176e565b915050610aa9565b506040805160808101825283815260208082018781523383850181815242606080870191825260018054808201825560009190915296517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf660049889029081019190915594517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf786015591517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf8850180546001600160a01b0319166001600160a01b03909216919091179055517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf99093019290925592548451938452918301869052928201527f483a31c379a4b707332853662276a3424ec44f0ccbfc20d78fd9d143694f7669910160405180910390a150505050565b6060600b8054806020026020016040519081016040528092919081815260200182805480156108765760200282019190600052602060002090815481526020019060010190808311610862575050505050905090565b6007805461098290611789565b606060038054806020026020016040519081016040528092919081815260200182805480156108765760200282019190600052602060002090815481526020019060010190808311610862575050505050905090565b600d805461098290611789565b60018181548110610d2157600080fd5b60009182526020909120600490910201805460018201546002830154600390930154919350916001600160a01b03169084565b60008080806001548510610da05760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606401610911565b60018581548110610db357610db361171d565b90600052602060002090600402016000015460018681548110610dd857610dd861171d565b90600052602060002090600402016001015460018781548110610dfd57610dfd61171d565b906000526020600020906004020160020160009054906101000a90046001600160a01b031660018881548110610e3557610e3561171d565b90600052602060002090600402016003015493509350935093509193509193565b606060078054610e6590611789565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9190611789565b80156108765780601f10610eb357610100808354040283529160200191610876565b820191906000526020600020905b815481529060010190602001808311610ec157509395945050505050565b60008281526009602052604090205460ff16610f40576008805460018181019092557ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3018390556000838152600960205260409020805460ff191690911790555b6000828152600a602090815260409091208251610970928401906113b1565b60008281526002602052604090205460ff16610fdb5760405162461bcd60e51b815260206004820152603560248201527f7468652066726f6d20737461746520686173206e6f74206265656e20636f6e666044820152741a59dd5c9959081a5b881d1a1a5cc81bd89a9958dd605a1b6064820152608401610911565b60008181526002602052604090205460ff166110555760405162461bcd60e51b815260206004820152603360248201527f74686520746f20737461746520686173206e6f74206265656e20636f6e6669676044820152721d5c9959081a5b881d1a1a5cc81bd89a9958dd606a1b6064820152608401610911565b61105f82826111a0565b6110e35760405162461bcd60e51b815260206004820152604960248201527f74686520726571756573746564206e657874207374617465206973206e6f742060448201527f616e20616c6c6f776564206e65787420737461746520666f72207468697320746064820152683930b739b4ba34b7b760b91b608482015260a401610911565b6110ec8161124c565b6111965760405162461bcd60e51b815260206004820152606960248201527f7468652073656e646572206f662074686973207472616e73616374696f6e206460448201527f6f6573206e6f742068617665206120726f6c65207468617420616c6c6f77732060648201527f7472616e736974696f6e206265747765656e207468652066726f6d20616e6420608482015268746f2073746174657360b81b60a482015260c401610911565b610a1682826112c1565b6000828152600260205260408120600501815b815481101561124457604080516020810186905201604051602081830303815290604052805190602001208282815481106111f0576111f061171d565b906000526020600020015460405160200161120d91815260200190565b6040516020818303038152906040528051906020012014156112325760019250611244565b8061123c8161176e565b9150506111b3565b505092915050565b6000818152600260208190526040822001805461126857600191505b60005b81548110156112ba5761129a3383838154811061128a5761128a61171d565b906000526020600020015461130c565b156112a857600192506112ba565b806112b28161176e565b91505061126b565b5050919050565b6000818152600260205260408120600301905b8154811015611306576112f48484848481548110610ac957610ac961171d565b806112fe8161176e565b9150506112d4565b50505050565b600080546001600160a01b031615806113aa5750600054604051630dace25b60e31b81526001600160a01b0385811660048301523060248301526044820185905290911690636d6712d89060640160206040518083038186803b15801561137257600080fd5b505afa158015611386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113aa919061188f565b9392505050565b8280546113bd90611789565b90600052602060002090601f0160209004810192826113df5760008555611425565b82601f106113f857805160ff1916838001178555611425565b82800160010185558215611425579182015b8281111561142557825182559160200191906001019061140a565b5061143192915061143f565b5090565b61143d6118b1565b565b5b808211156114315760008155600101611440565b60006020828403121561146657600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561149d57815187529582019590820190600101611481565b509495945050505050565b8581526000602060a0818401526114c260a084018861146d565b83810360408501526114d4818861146d565b8481036060860152865180825283880192509083019060005b818110156115135783516001600160e01b031916835292840192918401916001016114ed565b505080935050505063ffffffff60e01b831660808301529695505050505050565b6020815260006113aa602083018461146d565b600060208083528351808285015260005b8181101561157457858101830151858201604001528201611558565b81811115611586576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126115c357600080fd5b813567ffffffffffffffff808211156115de576115de61159c565b604051601f8301601f19908116603f011681019082821181831017156116065761160661159c565b8160405283815286602085880101111561161f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561165257600080fd5b823567ffffffffffffffff8082111561166a57600080fd5b611676868387016115b2565b9350602085013591508082111561168c57600080fd5b50611699858286016115b2565b9150509250929050565b6000602082840312156116b557600080fd5b813567ffffffffffffffff8111156116cc57600080fd5b6116d8848285016115b2565b949350505050565b600080604083850312156116f357600080fd5b82359150602083013567ffffffffffffffff81111561171157600080fd5b611699858286016115b2565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168060ff0382111561176657611766611733565b019392505050565b600060001982141561178257611782611733565b5060010190565b600181811c9082168061179d57607f821691505b602082108114156117be57634e487b7160e01b600052602260045260246000fd5b50919050565b7f6469643a64656d6f3a737570706c79636861696e66696e616e63653a0000000081526000601c6000845481600182811c91508083168061180657607f831692505b602080841082141561182657634e487b7160e01b86526022600452602486fd5b81801561183a576001811461184f57611880565b60ff1986168a890152848a0188019650611880565b60008b81526020902060005b868110156118765781548c82018b015290850190830161185b565b505087858b010196505b50949998505050505050505050565b6000602082840312156118a157600080fd5b815180151581146113aa57600080fd5b634e487b7160e01b600052605160045260246000fdfea2646970667358221220affb6f02e9a614494cd7d0d8c9949bdc0a2a376f5450f17fb9a3935feea6aaa664736f6c6343000809003374686520737461746520686173206e6f74206265656e2063726561746564207952455441494c5f4f524445525f554e46554c46494c4c4544000000000000000057484f4c4553414c455f4f524445525f46554c46494c4c45440000000000000052455441494c5f4f524445525f46554c46494c4c45440000000000000000000052455441494c5f4f524445525f504c4143454400000000000000000000000000574f4f4c5f544553545f47524144455f464545444241434b000000000000000053656e646572206e65656473205550444154455f55494649454c44444546494e4954494f4e535f524f4c4553656e646572206e65656473204352454154455f53544154454d414348494e455f524f4c45a2646970667358221220dc2de6d1b91ceb43d9af458a03032de9bc023769003aee9768c976138e0ff07264736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "create(string,string)": {
        "details": "Factory method to create a new supplychain. Emits StateMachineCreated event.",
        "params": {
          "Order_Number": "Unique Identification Number",
          "ipfsFieldContainerHash": "ipfs hash of supplychain metadata"
        }
      },
      "setUIFieldDefinitionsHash(string)": {
        "params": {
          "uiFieldDefinitionsHash": "value to assign to _uiFieldDefinitionsHash"
        }
      }
    },
    "title": "Factory contract for supplychain state machines",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "create(string,string)": {
        "notice": "Create new supplychain"
      },
      "getUIFieldDefinitionsHash()": {
        "notice": "Retrieves the value of `_uiFieldDefinitionsHash`"
      },
      "setUIFieldDefinitionsHash(string)": {
        "notice": "Sets the value of `_uiFieldDefinitionsHash`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9780,
        "contract": "contracts/supplychain/SupplyChainFactory.sol:SupplyChainFactory",
        "label": "_uiFieldDefinitionsHash",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2246,
        "contract": "contracts/supplychain/SupplyChainFactory.sol:SupplyChainFactory",
        "label": "gateKeeper",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(GateKeeper)1978"
      },
      {
        "astId": 4317,
        "contract": "contracts/supplychain/SupplyChainFactory.sol:SupplyChainFactory",
        "label": "_registry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(StateMachineRegistry)4494"
      }
    ],
    "types": {
      "t_contract(GateKeeper)1978": {
        "encoding": "inplace",
        "label": "contract GateKeeper",
        "numberOfBytes": "20"
      },
      "t_contract(StateMachineRegistry)4494": {
        "encoding": "inplace",
        "label": "contract StateMachineRegistry",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}